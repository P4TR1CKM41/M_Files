clc
clear all
close all
% % TEST = load('/Users/patrick/Desktop/TunedZones_Standard_P006_01.mat');
pc = computer;
os=strcmp('PCWIN64', pc);
if os == 1
    disp ('win');
    try
        cd ('C:\Users\User\Desktop\')
    end
    slash = '\';
else
    try
        cd('/Users/patrick/Desktop/')
    end
    slash =  '/';
end
%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /Users/patrick/Desktop/Probandendatenbank.xls
%    Worksheet: Sheet1
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2019/12/27 10:29:35

%% Import the data
[~, ~, raw] = xlsread('E:\Brooks_TZ\TOE_STRENGTH\Probandendatenbank.xlsx','Sheet1');
raw = raw(2:end,:);
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
stringVectors = string(raw(:,[1,2,3,4,9]));
stringVectors(ismissing(stringVectors)) = '';
raw = raw(:,[5,6,7,8]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Create table
Probandendatenbank = table;

%% Allocate imported array to column variable names
Probandendatenbank.VarName1 = cellstr(stringVectors(:,1));
Probandendatenbank.Vorname = cellstr(stringVectors(:,2));
Probandendatenbank.Nachname = cellstr(stringVectors(:,3));
Probandendatenbank.Geschlecht = categorical(stringVectors(:,4));
Probandendatenbank.jahr = data(:,1);
Probandendatenbank.Alter = data(:,2);
Probandendatenbank.Gre = data(:,3);
Probandendatenbank.Gewicht = data(:,4);
Probandendatenbank.HinweisszurMessungmissing = cellstr(stringVectors(:,5));

%% Clear temporary variables
clearvars data raw stringVectors R;
%%
main = ('E:\Brooks_TZ\TOE_STRENGTH\RAW volt');%uigetdir
cd (main)
folders = dir(main);
dirFlags = [folders.isdir];
% Extract only those that are directories.
sub_folder = folders(dirFlags);
sub_folder = sub_folder(arrayfun(@(x) ~strcmp(x.name(1),'.'),sub_folder));


i=1;
while i<= length (sub_folder)
    
    sub_folder(i).name
    %get the index of the corosponding subkect
    Index=find(strcmp(Probandendatenbank.VarName1, sub_folder(i).name)); % the index corospnse to the subject in subject demografics file
    PI.Masse = Probandendatenbank.Gewicht(Index);
    PI.Jahrgang = Probandendatenbank.jahr(Index);
    PI.Groesse =  Probandendatenbank.Gre(Index);
    PI.Winkel= 30;
    temp_subect_folder = strcat (sub_folder(i).folder, slash , sub_folder(i).name )
    PI.Bein = 'r';
    PI.Geschlecht =  string(Probandendatenbank.Geschlecht(Index));
    PI.Vorname= '';
    PI.Name = string(Probandendatenbank.VarName1(Index));
    cd (temp_subect_folder)
    
    datatemp = dir(fullfile(temp_subect_folder, '*.txt'));
    datatemp = datatemp(arrayfun(@(x) ~strcmp(x.name(1),'.'),datatemp));
    zz=1;
    while zz<= length (datatemp)
        
        datatemp(zz).name
        dataout = importfile( datatemp(zz).name, 1, inf);
        %        plot(dataout.VarName2)
        Samplerate= 1000; % 2000 for P088, 89, 90, 91, 93, 95 87 100
        [b,a] = butter(2, 10/(Samplerate/2), 'low');
        DATAfilt = filtfilt(b,a,(dataout.VarName2));
        %          Kraft_GES = max(movag(DATAfilt,100));
        
        %steffen part
        %nsamples = get(ai, 'SamplesAcquired');
        %DATA = getdata(ai, nsamples).*100.*0.057./masse;
        masse = PI.Masse;
        DATA = (dataout.VarName2).*100.*0.057./masse;
        DATAfilt = filtfilt(b,a,DATA(:,1));
        DATAscaled = DATAfilt;
        Kraft_GES = max(movag(DATAscaled,100)); % 100 for Samplerate 1000 % 200 for Samplerate 2000
        Datum=0;
        %steffen part
        %Zehkraft 
        MaxDrehmoment= Kraft_GES;
        Rohdaten = dataout.VarName2.*100.*0.057./masse;
        GefDaten= DATAscaled;
        C = strsplit( datatemp(zz).name,'.');
%         filename =  C{1, 1};
%         TunedZones_Standard_P065_03
 f = strsplit(  C{1, 1},'_');
        filename = strcat ('TunedZones_Standard_', f{1, 1},'_0',f{1, 2});
        save(filename,'MaxDrehmoment','Rohdaten', 'GefDaten', 'PI','Datum')
        zz=zz+1;
    end
    
    i=i+1;
end


function y=movag(M,n)

if mod(n,2) > 0
    n = n+1;
end
for i =n/2+1:length(M)-n/2-1
    Mneu(i,1) = sum(M(i-n/2:i+n/2,1) /n);
end

Mneu(length(M)-n/2:length(M),1) = 0;
y = Mneu;
end

function dataout = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   P0881 = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   P0881 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   P0881 = importfile('P088_1.txt', 1, 29800);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/12/18 11:56:58

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\.]*)+[\,]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\.]*)*[\,]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains('.')
                thousandsRegExp = '^\d+?(\.\d{3})*\,{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = strrep(numbers, '.', '');
                numbers = strrep(numbers, ',', '.');
                numbers = textscan(char(numbers), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [2,3,4,5]);
rawStringColumns = string(raw(:, 1));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

%% Create output variable
dataout = table;
dataout.VarName2 = cell2mat(rawNumericColumns(:, 1));
dataout.VarName3 = cell2mat(rawNumericColumns(:, 2));
dataout.VarName4 = cell2mat(rawNumericColumns(:, 3));
dataout.VarName5 = cell2mat(rawNumericColumns(:, 4));
end
